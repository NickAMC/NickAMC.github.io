group_by(State) |>
```
tourism_2 |>
group_by(State) |>
summarize(TotalTrips = sum(Trips, na.rm = TRUE), .groups = 'drop') |>
as_tsibble()
tourism_2 |>
group_by(State) |>
summarize(TotalTrips = sum(Trips, na.rm = TRUE), .groups = 'drop') |>
as_tsibble(index = Quarter)
tourism_2 |>
group_by(State) |>
summarize(TotalTrips = sum(Trips, na.rm = TRUE)) |>
as_tsibble(index = Quarter)
tourism_2 |>
group_by(State, Purpose, Region) |>
summarize(TotalTrips = sum(Trips, na.rm = TRUE)) |>
as_tsibble(index = Quarter)
tourism_2 |>
group_by(State, Purpose, Region) |>
summarize(TotalTrips = sum(Trips)) |>
as_tsibble(index = Quarter)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE,
tidy.opts = list(width.cutoff = 80), tidy = TRUE)
head(bricks)
tourism_2 |>
group_by(Region, Purpose) |>
summarize(AverageTrips = mean(Trips, na.rm = TRUE)) |>
filter(AverageTrips == max(AverageTrips)) |>
arrange(desc(AverageTrips)) |> head()
tourism_2 |>
group_by(State, Purpose, Region) |>
summarize(TotalTrips = sum(Trips)) |>
as_tsibble(index = Quarter) |>
head()
tourism_2 |>
group_by(State) |>
summarize(TotalTrips = sum(Trips)) |>
as_tsibble(index = Quarter) |>
head()
plot_time_series <- function(tsibble_data, column) {
if(!is.tsibble(tsibble_data)) {
stop("Data must be tsibble object!!!")
}
if(!column %in% names(tsibble_data)) {
stop("Column must be in the tsibble!!!")
}
plots <- list(
autoplot = autoplot(ts_data, {{col_name}}),
gg_season = ts_data %>% gg_season({{col_name}}),
subseries = ts_data %>% subseries_plot({{col_name}}),
gglag = ts_data %>% gglag({{col_name}}),
ACF = ts_data %>% ACF({{col_name}})
)
return(plots)
}
total_private <- us_employment |>
filter(Title == "Total Private")
total_private
plot_time_series(total_private, Employed)
if(!is_tsibble(tsibble_data)) {
stop("Data must be tsibble object!!!")
}
plot_time_series <- function(tsibble_data, column) {
if(!is_tsibble(tsibble_data)) {
stop("Data must be tsibble object!!!")
}
if(!column %in% names(tsibble_data)) {
stop("Column must be in the tsibble!!!")
}
plots <- list(
autoplot = autoplot(ts_data, {{col_name}}),
gg_season = ts_data %>% gg_season({{col_name}}),
subseries = ts_data %>% subseries_plot({{col_name}}),
gglag = ts_data %>% gglag({{col_name}}),
ACF = ts_data %>% ACF({{col_name}})
)
return(plots)
}
plot_time_series(total_private, Employed)
plot_time_series(total_private, "Employed")
plot_time_series(total_private, "Employed")
plot_time_series <- function(tsibble_data, column) {
if(!is_tsibble(tsibble_data)) {
stop("Data must be tsibble object!!!")
}
if(!column %in% names(tsibble_data)) {
stop("Column must be in the tsibble!!!")
}
plots <- list(
autoplot = autoplot(tsibble_data, {{column}}),
gg_season = tsibble_data %>% gg_season({{column}}),
subseries = tsibble_data %>% subseries_plot({{column}}),
gglag = tsibble_data %>% gglag({{column}}),
ACF = tsibble_data %>% ACF({{column}})
)
return(plots)
}
plot_time_series(total_private, "Employed")
plot_time_series <- function(tsibble_data, column) {
if(!is_tsibble(tsibble_data)) {
stop("Data must be tsibble object!!!")
}
if(!column %in% names(tsibble_data)) {
stop("Column must be in the tsibble!!!")
}
plots <- list(
autoplot = autoplot(tsibble_data, {{column}}),
gg_season = tsibble_data |>  gg_season({{column}}),
subseries = tsibble_data |>  subseries_plot({{column}}),
gglag = tsibble_data |>  gglag({{column}}),
ACF = tsibble_data |>  ACF({{column}})
)
return(plots)
}
plot_time_series(total_private, "Employed")
plot_time_series <- function(tsibble_data, column) {
if(!is_tsibble(tsibble_data)) {
stop("Data must be tsibble object!!!")
}
if(!column %in% names(tsibble_data)) {
stop("Column must be in the tsibble!!!")
}
plots <- list(
autoplot = autoplot(tsibble_data, {{column}}),
gg_season = tsibble_data |>  gg_season({{column}}),
subseries = tsibble_data |>  gg_subseries({{column}}),
gglag = tsibble_data |>  gglag({{column}}),
ACF = tsibble_data |>  ACF({{column}})
)
return(plots)
}
plot_time_series(total_private, "Employed")
plot_time_series <- function(tsibble_data, column) {
if(!is_tsibble(tsibble_data)) {
stop("Data must be tsibble object!!!")
}
if(!column %in% names(tsibble_data)) {
stop("Column must be in the tsibble!!!")
}
plots <- list(
autoplot = autoplot(tsibble_data, {{column}}),
gg_season = tsibble_data |>  gg_season({{column}}),
subseries = tsibble_data |>  gg_subseries({{column}}),
gglag = tsibble_data |>  gg_lag({{column}}),
ACF = tsibble_data |>  ACF({{column}})
)
return(plots)
}
total_private <- us_employment |>
filter(Title == "Total Private")
plot_time_series(total_private, "Employed")
plot_time_series <- function(tsibble_data, column) {
if(!is_tsibble(tsibble_data)) {
stop("Data must be tsibble object!!!")
}
if(!column %in% names(tsibble_data)) {
stop("Column must be in the tsibble!!!")
}
plots <- list(
autoplot = autoplot(tsibble_data, {{column}}),
gg_season = tsibble_data |>  gg_season({{column}}),
subseries = tsibble_data |>  gg_subseries({{column}}),
gglag = tsibble_data |>  gg_lag({{column}}),
)
return(plots)
}
plot_time_series(total_private, "Employed")
plot_time_series <- function(tsibble_data, column) {
if(!is_tsibble(tsibble_data)) {
stop("Data must be tsibble object!!!")
}
if(!column %in% names(tsibble_data)) {
stop("Column must be in the tsibble!!!")
}
plots <- list(
autoplot = autoplot(tsibble_data, {column}),
gg_season = tsibble_data |>  gg_season({{column}}),
subseries = tsibble_data |>  gg_subseries({{column}}),
gglag = tsibble_data |>  gg_lag({{column}}),
)
return(plots)
}
plot_time_series(total_private, "Employed")
autoplot(total_private, Employed)
gg_season(total_private, period = "monthly")
gg_season(total_private, period = "month")
gg_season(total_private)
gg_season(total_private) +
theme_minimal()
autoplot(total_private, Employed) +
theme_minimal()
gg_subseries(total_private) +
theme_minimal()
gg_subseries(total_private) +
theme(axis.text.x = element_blank(),  # Removes x-axis tick labels
axis.ticks.x = element_blank()) +# Removes x-axis ticks
theme_minimal()
gg_subseries(total_private) +
theme(axis.text.x = element_blank()) +# Removes x-axis ticks
theme_minimal()
gg_lag(total_private) + theme_minimal()
gg_lag(total_private, lag = 2) + theme_minimal()
gg_lag(total_private,geom = "point") + theme_minimal()
ACF(total_private) +
theme_minimal()
total_private
total_private |>
ACF(Employed) +
theme_minimal()
total_private |>
ACF(Employed) +
autoplot() +
theme_minimal()
total_private |>
select(Month,Employed) |>
ACF(Employed) +
autoplot() +
theme_minimal()
total_private |>
select(Month,Employed) |>
ACF() +
autoplot() +
theme_minimal()
gg_lag(total_private,geom = "point") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5)) +
theme_minimal()
gg_lag(total_private,geom = "point") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5)) +
theme_minimal()
gg_lag(total_private,geom = "point") +
theme_minimal()
total_private <- us_employment |>
filter(Title == "Total Private") |> select(Month, Employed)
autoplot(total_private, Employed) +
theme_minimal()
gg_season(total_private) +
theme_minimal()
gg_subseries(total_private) +
theme_minimal()
gg_lag(total_private,geom = "point") +
theme_minimal()
gg_subseries(total_private) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5)) +
theme_minimal()
total_private |>
ACF(Employed) +
autoplot() +
theme_minimal()
acf_result <- acf(total_private$Employed, plot = FALSE)
autoplot(acf_result)
acf_result <- ACF(total_private$Employed,lag_max = 10)
acf_result <- ACF(total_private$Employed,lag.max = 10)
acf_result <- ACF(total_private,lag.max = 10)
autoplot(acf_result)
total_private |> ACF(Employed, lag_max = 9)
total_private |> ACF(Employed) |> autoplot()
total_private |> ACF(Employed, lag_max = 10) |> autoplot()
total_private |> ACF(Employed
) |> autoplot()
total_private |>
ACF(Employed) |>
autoplot() +
theme_minimal()
total_private
bricks
gg_subseries(total_private) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5)) +
theme_minimal()
autoplot(bricks) +
theme_minimal()
gg_season(bircks) + theme_minimal()
gg_season(bricks) + theme_minimal()
autoplot(total_private)
ACF(total_private)
plot_time_series <- function(data) {
p1 <- autoplot(data) + theme_minimal()
p2 <- gg_season(data) + theme_minimal()
p3 <- gg_subseries(data) + theme_minimal()
p4 <- gg_lag(data, geom = "point") + theme_minimal()
p5 <- ACF(data) |>
autplot() + theme_minimal()
plots <- list(p1,p2,p3,p4,p5)
return(plots)
}
print(plot_time_series(total_private))
plot_time_series <- function(data) {
p1 <- autoplot(data) + theme_minimal()
p2 <- gg_season(data) + theme_minimal()
p3 <- gg_subseries(data) + theme_minimal()
p4 <- gg_lag(data, geom = "point") + theme_minimal()
p5 <- ACF(data) |>
autoplot() + theme_minimal()
plots <- list(p1,p2,p3,p4,p5)
return(plots)
}
print(plot_time_series(total_private))
print(plot_time_series(bricks))
plot_time_series <- function(data) {
p1 <- autoplot(data) + theme_minimal()
p2 <- gg_season(data) + theme_minimal()
p3 <- gg_subseries(data) + theme_minimal()
p4 <- gg_lag(data, geom = "point") + theme_minimal()
p5 <- ACF(data) |>
autoplot() + theme_minimal()
print(p1)
print(p2)
print(p3)
print(p4)
print(p5)
}
print(plot_time_series(total_private))
print(plot_time_series(bricks))
pelt
hare <- pelt |> select(-Lynx)
hare
plot_time_series(hare)
print(plot_time_series(hare))
gg_season(hare) + theme_minimal()
gg_season(hare, period = "year") + theme_minimal()
is.tsibble(hare)
is_tsibble(hare)
ahre
hare
hare <- pelt |> select(-Lynx) |> as_tsibble(index = Year) |> fill_gaps()
print(plot_time_series(hare))
hare <- pelt |> select(-Lynx) |> as_tsibble(index = Year)
hare
PBS
PBS
us_gasoline
print(plot_time_series(us_gasoline))
sum(is.na(hare))
print(plot_time_series(hare))
head(hare)
hare <- pelt |> select(-Lynx) |> as_tsibble(index = Year)
head(hare)
h20 <- PBS |>
filter(ATC2 == "H02") |>
select(Month, Cost)
h02 <- PBS |>
filter(ATC2 == "H02") |>
select(Month, Cost)
H02
h02
print(plot_time_series(h02))
h02
h02
h02 <- PBS |>
filter(ATC2 == "H02") |>
select(Month, Cost)
h02
h02 <- PBS |>
filter(ATC2 == "H02") |>
ungroup() |>
select(Month, Cost)
h02
h02 <- PBS |>
filter(ATC2 == "H02") |>
ungroup() |>
select(Month, Cost)
h02
h02
h02 <- PBS |>
filter(ATC2 == "H02") |>
as_tsibble() |>
select(Month, Cost)
h02
h02 <- PBS |>
filter(ATC2 == "H02") |>
as_tsibble() |>
select(Month, Cost) |>
update_key(NULL)
h02 <- PBS |>
filter(ATC2 == "H02") |>
as_tsibble() |>
select(-Concession, -Type, -ATC1, -ATC2)
h02
h02 <- PBS |>
filter(ATC2 == "H02") |>
as_tibble() |>
select(Month, Cost)
h02
h02 <- PBS |>
filter(ATC2 == "H02") |>
as_tibble() |>
select(Month, Cost) |>
as_tsibble(index = Month)
h02 <- PBS |>
filter(ATC2 == "H02") |>
as_tibble() |>
select(Month, Cost)
h02
h02 <- PBS |>
filter(ATC2 == "H02") |>
as_tibble() |>
select(Month, Cost) |>
group_by(Month) |>
summarize(Cost = sum(Cost)) |>
as_tsibble(index = Month)
h02
print(plot_time_series(h02))
hare <- pelt |> select(-Lynx) |> as_tsibble(index = Year)
head(hare)
print(plot_time_series(hare))
plot_time_series_without_gg_season <- function(data) {
p1 <- autoplot(data) + theme_minimal()
p3 <- gg_subseries(data) + theme_minimal()
p4 <- gg_lag(data, geom = "point") + theme_minimal()
p5 <- ACF(data) |>
autoplot() + theme_minimal()
print(p1)
print(p3)
print(p4)
print(p5)
}
print(plot_time_series_without_gg_season(hare))
install.packages("reticulate")
install.packages("feather")
write.feather(aus_production, "aus_production.feather")
write.feather(pelt, "pelt.feather")
write.feather(gafa_stock, "gafa_stock.feather")
write.feather(vic_elec, "vic_elec.feather")
library(fpp3)
library(feather)
write.feather(aus_production, "aus_production.feather")
write.feather(pelt, "pelt.feather")
write.feather(gafa_stock, "gafa_stock.feather")
write.feather(vic_elec, "vic_elec.feather")
write_feather(aus_production, "aus_production.feather")
write_feather(pelt, "pelt.feather")
write_feather(gafa_stock, "gafa_stock.feather")
write_feather(vic_elec, "vic_elec.feather")
reticulate::repl_python(quiet = TRUE, input = r"--(import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns)--")
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns)--")
reticulate::repl_python(quiet = TRUE, input = r"--(import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns)--")
no
reticulate::repl_python(quiet = TRUE, input = r"--(import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns)--")
reticulate::repl_python(quiet = TRUE, input = r"--(aus_production = pd.read_csv("aus_production.csv"))--")
reticulate::repl_python(quiet = TRUE, input = r"--(aus_production = pd.read_feather("aus_production.feather"))--")
pip install pyarrow
reticulate::repl_python(quiet = TRUE, input = r"--(aus_production = pd.read_feather("aus_production.feather"))--")
reticulate::repl_python(quiet = TRUE, input = r"--(aus_production = pd.read_feather("aus_production.feather"))--")
reticulate::repl_python(quiet = TRUE, input = r"--(aus_production = pd.read_feather("aus_production.feather")
pelt = pd.read_feather("pelt.feather")
gafa_stock = pd.read_feather("gafa_stock")
vic_elec = pd.read_feather("vic_elec.feather"))--")
reticulate::repl_python(quiet = TRUE, input = r"--(aus_production = pd.read_feather("aus_production.feather")
pelt = pd.read_feather("pelt.feather")
gafa_stock = pd.read_feather("gafa_stock")
vic_elec = pd.read_feather("vic_elec.feather"))--")
reticulate::repl_python(quiet = TRUE, input = r"--(import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from pyarrow import feather)--")
knitr::opts_chunk$set(echo = TRUE)
library(fpp3)
retailing_aus <- aus_retail[grepl("Retail", aus_retail$Industry, ignore.case = TRUE), ]
x11_decomp <- retailing_aus |> model(x11 = X_13ARIMA_SEATS(Turnover ~ x11())) |> components()
head(retailing_aus)
x11_decomp <- retailing_aus |>
model(x11 = X_13ARIMA_SEATS(Turnover ~ x11())) |>
components()
install.packages("seasonal")
library(seasonal)
x11_decomp <- retailing_aus |>
model(x11 = X_13ARIMA_SEATS(Turnover ~ x11())) |>
components()
retailing_aus
View(retailing_aus)
aus_retial
aus_retail
retailing_aus_tsibble <- as_tsibble(retailing_aus, key = your_key_column, index = Date, regular = TRUE)
retailing_aus_tsibble <- as_tsibble(retailing_aus, index = Month, regular = TRUE)
retailing_aus_tsibble
x11_decomp <- retailing_aus |>
model(x11 = X_13ARIMA_SEATS(Turnover ~ x11())) |>
components()
aus_retail
retailing_aus <- aus_retail[grepl("Retail", aus_retail$Industry), ]
x11_decomp <- retailing_aus |>
model(x11 = X_13ARIMA_SEATS(Turnover ~ x11())) |>
components()
retailing_aus <- aus_retail[grepl("Retail", aus_retail$Industry), ]
x11_decomp <- retailing_aus |>
model(x11 = X_13ARIMA_SEATS(Turnover ~ x11())) |>
components()
library(fpp3)
library(seasonal)
x11_decomp <- retailing_aus |>
model(x11 = X_13ARIMA_SEATS(Turnover ~ x11())) |>
components()
x11_decomp <- retailing_aus %>%
model(x11 = X_13ARIMA_SEATS(Turnover ~ x11())) %>%
components()
retailing_aus
retailing_aus <- aus_retail[grepl("retail", aus_retail$Industry), ]
x11_decomp <- retailing_aus %>%
model(x11 = X_13ARIMA_SEATS(Turnover ~ x11())) %>%
components()
